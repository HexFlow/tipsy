package tipsy.cluster

import scala.collection.mutable.{Map => mMap}

object Clusterify {

  def apply(matrixNetwork: List[List[Double]], length: Int, names: List[String], cluster: Double): Unit = {
    println("--------------")
    println("Matrix Network")
    println("--------------")
    println(matrixNetwork)
    println("-----")
    println("Names")
    println("-----")
    println(names)
    val fastmaped = fastmap(matrixNetwork, length, 10)
    val kmeaned = kmeans(matrixNetwork, length, 4, 10, true)
    val dbscaned = dbscan(matrixNetwork, length, 0.30, 3)
  }

  def fastmap(matrixNetwork: List[List[Double]], length: Int, dimOfVS: Int): (List[List[Double]], List[(Int, Int)]) = {
    val fastmaped = FastMap(matrixNetwork, length, dimOfVS)
    println("---------------")
    println("Projection In K")
    println("---------------")
    println(fastmaped._1)
    println("-----------------")
    println("Pivots in FastMap")
    println("-----------------")
    println(fastmaped._2)
    fastmaped
  }

  def dbscan(matrixNetwork: List[List[Double]], length: Int, eps: Double, minPts: Int): mMap[Int, (DBSCANPoint, Int)] = {
    val dbscaned = DBSCAN(matrixNetwork, length, eps, minPts)
    val clusters = Array.fill(length)(-1)
    for (i <- List.range(0, length)) {
      dbscaned get i match {
        case None =>
        case Some((NOISE, _)) => clusters(i) = -1
        case Some((_, cluster)) => clusters(i) = cluster
      }
    }
    println("----------------------------")
    println("Clusters generated by DBSCAN")
    println("----------------------------")
    println(clusters.toList)
    dbscaned
  }

  def kmeans(matrixNetwork: List[List[Double]], length: Int, clusters: Int, dimOfVS: Int, equalSized: Boolean): (List[List[Double]], List[Int]) = {
    val fastmaped = fastmap(matrixNetwork, length, dimOfVS)
    val kmeaned = KMeans(fastmaped._1, length, dimOfVS, clusters, equalSized)
    println("--------------------")
    println("Centroids In K-Means")
    println("--------------------")
    println(kmeaned._1)
    println("-----------------------------")
    println("Clusters generated in K-Means")
    println("-----------------------------")
    println(kmeaned._2.zipWithIndex.map(a => (a._2, a._1)))
    kmeaned
  }

}
